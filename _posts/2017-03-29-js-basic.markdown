---
layout: post
title: js Basic
date: 2017-03-29
comments: true
external-url:
categories: javascript
---

## javascript basic 概述

### 1、js的组成
- 由核心语法（ECMAScript）
- 浏览器对象模型（BOM）
- 文档对象模型（DOM）

### 2、js的基本结构

语法:

```js
     <script type= "text/javascript">
       <!--
        alert("Hello World!");      //JavaScript 代码
       ...
       -->
    </script>

```
>注：
（1）`<!-- -->`部分是非必须的，为了规避老版本浏览器不识别;
（2）`//`是 JavaScript 的注释符号，`/*   */`是多行注释符号，它会阻止 JavaScript 编译器对这一行的编译;
（3）type属性不推荐写成 `language= " javascript "` ,不符合XHMLT1.0。


### 3、js引用方式

方式一：HTML标签中引用；

方式二：`<script>`标签中直接书写；

on CSS file:
```
.left:
expression(document.body.offsetWidth -110 + "px");
```
方式三：通过`<script>`标签的src属性引入外部JS文件；

方式四：浏览器地址栏输入; `JavaScript：alert（"hello!")`


### 4、常用的输入、输出

`alert()`
```
alert("提示信息"); //提示信息框
```
`prompt()`
```
prompt("提示信息", "输入框的默认信息");
prompt("请输入姓名");
```
`confirm（）`
```
confirm("确认信息？"); //确定则返回true，取消则返回false

```

## javaScript的基本语法

### 1、 变量声明和使用

js变量：JavaScript变量用于保存值、保存表达式;

>注：
(1)由于 JavaScript 对大小写敏感，变量名也对大小写敏感 （y 和 Y 是两个不同的变量）；
(2)变量必须以字母或`下划线_`或`美元符$`开始 ，不能使用关键字作为变量名。


变量声明:是通过 var 语句来声明的，无需指定数据类型；

```
var num = 10 ;
var str = "JavaScript" ;
//当然也可声明多个，之间用逗号隔开
var num =10 ,
str = "JavaScript";

//省略 var 语句，直接变量声明
num = 100; //相当于window.num = 100; （不推荐）

```
>注意：
(1)如声明多个采用第二种方式是较为高效的;
(2)每个代码后面的“;”是可省的，建议都写上。

变量的使用:建议先定义后使用;

- 运算符用于把文本值或字符串变量加起来（连接起来）;
- 如果是两个数字则为数学运算加号;
- `= `运算符用于给变量赋值，变量可以重复赋不同类型的值；


### 2、数据类型

- Undefined 
1、Undefined 类型只有一个值，即 undefined
2、未定义或定义未赋值
- Null 表示尚未存在的对象，与undefined值相等
- Number
 ```
var iNum=23; //整数
var iNum=23.0; //浮点数
```
- Boolean
- String 
`var string1="This is a string";`

4.运算符

`typeof`检测变量的返回值，为字符串类型;

- `undefined：`变量被声明后，但未被赋值
- `string：`用单引号或双引号来声明的字符串
- `boolean：`true或false
- `number：`整数或浮点数
- `function：`函数方法
- `object：`对象 或 数组 或 Null 类型

转换函数
- parseInt()
- parseFloat()
- toString()

强制类型转换
- Boolean()
- Number()
- String()


5.流程控制语句

 `while`，`do…while`，`for`，`for…in`

- `while：`先判断后执行;
- `do…while:`先执行后判断，至少执行一次;
- `for：`先判断，再执行;
- `for…in:`遍历对象成员;

使用场景
- 不知道循环次数，通常选择while或do…while;
- 知道循环次数,通常选择for循环;

6.语法规则
- 代码区分大小写;
- 变量、对象和函数的名称有意义，最好使用驼峰式命名;
- 句尾的分号最好不要省略;

## JavaScript中的函数定义
 1、JavaScript中的函数
- 一组可以随时随地运行的语句
- 将脚本编写为函数以避免页面载入时执行该脚本

 2、分类
-  系统函数
-  自定义函数

3、系统函数

|||
 |-----|-----|
 |函数名称 |描述|
 |parseInt() |解析一个字符串并返回一个整数|
 |parseFloat()| 解析一个字符串并返回一个浮点数|
 |isNaN() |检查某个值是否是数字,返回true \| false|
| eval() |计算 JavaScript 字符串，并把它作为脚本代码来执行|

4、自定义函数
语法：

```
 function 函数名 ( 参数1,参数2,…. )
 {
 //函数代码块
 }
 或
 var 函数名 = function (参数1,参数2,…. )
 {
 //函数代码块
 }
```
>传入的参数是可选的, 传入数量没有限制，多余的参数会忽略。

5、 如何调用函数
函数可以通过其名字加上括号中的参数进行调用:`函数名()`

```
//自定义函数调用
function sayHello(name){
alert( name + "hello" );
}
sayHello("Tom");

//函数变量的调用
var sayHello = function(name){
alert( name + "hello" );
}
sayHello(" Tom ");
```
6、匿名函数

- 匿名函数的基本形式为`(function(){...})();`
- 前面的括号包含函数体，后面的括号就是给匿名函数传递参数并立即执行
- 匿名函数的作用是避免全局变量的污染以及函数名的冲突
 
> `小括号()`的作用:
小括号能把我们的表达式组合分块，并且每一块，也就是每一对小括号，都有一个返回值。这个返回值实际上也就是小括号中表达式的返回值。所以，当我们用一对小括号把匿名函数括起来的时候，**实际上小括号对返回的，就是一个匿名函数的Function 对象。**因此，小括号对加上匿名函数就如同有名字的函数般被我们取得它的引用位置了。所以如果在这个引用变量后面再加上参数列表，就会实现普通函数的调用形式。
简单来说就是小括号有返回值，也就是小括号内的函数或者表达式的返回值，所以说小括号内的function返回值等于小括号的返回值。如调用方式2。

方式1：调用函数，得到返回值,强制运算符使函数调用执行;
```
(function(x,y){
alert(x+y);
return x+y;
}(3,4)); 
``` 
方式2：调用函数，得到返回值,强制函数直接执行再返回一个引用，引用再去调用执行;
```
(function(x,y){
alert(x+y);
return x+y;
})(3,4); 
```
这种方式也是很多库爱用的调用方式，如jQuery，Mootools。
 
方式3：使用void
```
void function(x) {
x = x-1;
alert(x);
}(9);
```

7、函数如何返回值
通过 return 关键字返回函数的值
函数在执行过 return 语句后立即停止代码。因此，return 语句后的代码都不会被执行。



