I" 6<p>Liquid 是一门开源的模板语言，由 <code class="highlighter-rouge">Shopify</code> 创造并用 <code class="highlighter-rouge">Ruby</code> 实现。<code class="highlighter-rouge">Jekyll</code> 将 <code class="highlighter-rouge">Liquid</code>作为自身的模版语言，并且添加了许多对象<code class="highlighter-rouge">object</code>、标记<code class="highlighter-rouge">tag</code>和过滤器<code class="highlighter-rouge">filter</code>。这些新增内容包括代表内容页面的对象、用于在页面中引入内容片段的标记<code class="highlighter-rouge">tag</code>，以及用于操作字符串和 <code class="highlighter-rouge">URL</code> 的过滤器。</p>

<p>在<code class="highlighter-rouge">Liquid</code>中有两种类型的标记：<code class="highlighter-rouge">Output</code>和 <code class="highlighter-rouge">Tag</code></p>

<p><code class="highlighter-rouge">Output</code>标记（有些可能解析文本）被包含在：{{ 两个配对的花括号中 }}类似：&lt;%=variable&gt;</p>

<p><code class="highlighter-rouge">Tag</code>标记（不能解析文本）被包含在:{ % 成对的花括号和百分号中 % }类似:&lt;% int i=2 ;%&gt;
<br /></p>
<hr />

<h3 id="输出output"><strong>输出(Output)</strong></h3>
<p>下面是关于输出标记的简单实例：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Hello {{name}}

Hello {{user.name}}

Hello {{ 'tobi' }}

</code></pre></div></div>
<p>§ 高级输出：过滤器
过滤器输入标记带有过滤器，方法很简单。第一个参数总是过滤器左边值的输出。当下个过滤器运行时，刚刚所得到的过滤器返回值就会成为新的左边值。直到最后没有过滤器时，模板就会接受最后的结果字符串。</p>

<p>Hello {{ ‘tobi’ | upcase }}输出结果是：<code class="highlighter-rouge">Hello TOBI</code></p>

<p>Hello tobi has {{ ‘tobi’ | size }} letters!输出结果是：<code class="highlighter-rouge">Hello tobi has 4 letters!</code></p>

<p>Hello {{ ‘tobi’ | capitalize }}输出结果是:<code class="highlighter-rouge">Hello Tobi</code></p>

<p>Hello {{ ‘1984-02-01’ | date: “%Y” }}输出结果是：<code class="highlighter-rouge">Hello 1984</code></p>

<p>§ 标准过滤器</p>

<p><code class="highlighter-rouge">date</code> - 格式化日期 语法参考</p>

<p><code class="highlighter-rouge">capitalize</code> - 将输入语句的首字母大写</p>

<p><code class="highlighter-rouge">downcase</code> - 将输入字符串转为小写</p>

<p><code class="highlighter-rouge">upcase</code> - 将输入字符串转为大写</p>

<p><code class="highlighter-rouge">first</code> - 得到传递数组的第一个元</p>

<p><code class="highlighter-rouge">last</code> - 得到传递数组的最后一个元素</p>

<p><code class="highlighter-rouge">join</code> - 将数组中的元素连成一串，中间通过某些字符分隔</p>

<p><code class="highlighter-rouge">sort</code> - 对数组元素进行排序</p>

<p><code class="highlighter-rouge">map</code> - 从一个给定属性中映射/收集一个数组</p>

<p><code class="highlighter-rouge">size</code> - 返回一个数组或字符串的大小</p>

<p><code class="highlighter-rouge">escape</code> - 对一串字符串进行编码</p>

<p><code class="highlighter-rouge">escape_once</code> - 返回一个转义的html版本，而不影响现有的转义文本</p>

<p><code class="highlighter-rouge">strip_html</code> - 去除一串字符串中的所有html标签</p>

<p><code class="highlighter-rouge">strip_newlines</code> - 从字符串中去除所有换行符(\n)</p>

<p><code class="highlighter-rouge">newline_to_br</code> - 将所有的换行符(\n)换成html的换行标记</p>

<p><code class="highlighter-rouge">replace</code> - 匹配每一处指定字符串，如 {{ ‘foofoo’ | replace:’foo’,’bar’ }} #=&gt; ‘barbar’</p>

<p><code class="highlighter-rouge">replace_first</code> - 匹配第一处指定的字符串，如 {{ ‘barbar’ | replace_first:’bar’,’foo’ }}#=&gt; ‘foobar’</p>

<p><code class="highlighter-rouge">remove</code> - 删除每一处匹配字符串，如 {{ ‘foobarfoobar’ | remove:’foo’ }}#=&gt; ‘barbar’</p>

<p><code class="highlighter-rouge">remove_first</code> - 删除第一处匹配的字符串，如 {{ ‘barbar’ | remove_first:’bar’ }}#=&gt; ‘bar’</p>

<p><code class="highlighter-rouge">truncate</code> - 将一串字符串截断为x个字符</p>

<p><code class="highlighter-rouge">truncatewords</code> - 将一串字符串截断为x个单词</p>

<p><code class="highlighter-rouge">prepend</code> - 在一串字符串前面加上指定字符串，如 {{ ‘bar’ | prepend:’foo’ }} #=&gt; ‘foobar’</p>

<p><code class="highlighter-rouge">append</code> - 在一串字符串后面加上指定字符串，如 {{ ‘foo’ | append:’bar’ }} #=&gt; ‘foobar’</p>

<p><code class="highlighter-rouge">minus</code> - 减，如 {{ 4 | minus:2 }}#=&gt; 2</p>

<p><code class="highlighter-rouge">plus</code> - 加，如{{ ‘1’ | plus:’1’ }} #=&gt; ‘11’, {{ 1 | plus:1 }} #=&gt; 2</p>

<p><code class="highlighter-rouge">times</code> - 乘，如{{ 5 | times:4 }}#=&gt; 20</p>

<p><code class="highlighter-rouge">divided_by</code> - 除，如 {{ 10 | divided_by:2 }}#=&gt; 5</p>

<p><code class="highlighter-rouge">split</code> - 将一串字符串根据匹配模式分割成数组，如 {{ “a~b” | split:~ }}#=&gt; [‘a’,’b’]</p>

<p><code class="highlighter-rouge">modulo</code> - 余数，如 {{ 3 | modulo:2 }}#=&gt; 1
<br /></p>
<hr />

<h3 id="标签tags"><strong>标签(Tags)</strong></h3>
<p>Tags用于你的模板逻辑处理。</p>

<p>下列是当前已经支持的标签：</p>

<p><code class="highlighter-rouge">assign</code> - 将一些值赋给一个变量</p>

<p><code class="highlighter-rouge">capture</code> - 块标记，把一些文本捕捉到一个变量中</p>

<p><code class="highlighter-rouge">case</code> - 块标记，标准的case语句</p>

<p><code class="highlighter-rouge">comment</code> - 块标记，将一块文本作为注释</p>

<p><code class="highlighter-rouge">cycle</code> - Cycle通常用于循环轮换值，如颜色或DOM类</p>

<p><code class="highlighter-rouge">for</code> - 用于循环For loop</p>

<p><code class="highlighter-rouge">if</code> - 标准的 if/else 块</p>

<p><code class="highlighter-rouge">include</code> - 包含其他的模板；对于区块化非常有效</p>

<p><code class="highlighter-rouge">raw</code> - 暂时性的禁用的标签的解析</p>

<p><code class="highlighter-rouge">unless</code> - if语句的简版</p>

<p><br /></p>
<hr />

<p><strong><code class="highlighter-rouge">omments</code></strong></p>

<p>注释是最简单的标签，它只是把内容包含起来。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> We made 1 million dollars {% comment %} in losses {% endcomment %} this year`
</code></pre></div></div>

<p><strong><code class="highlighter-rouge">Raw</code></strong></p>

<p>Raw暂时性的禁用的标签的解析。这在需要展示一些可能产生冲突的内容（如本页面，要展示liquid语句，就需要包含在raw标签间，否则会被解析）时非常有用。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>In Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not.
</code></pre></div></div>

<p><strong><code class="highlighter-rouge">if/else/</code></strong></p>

<p>Liquid使得你可以通过<code class="highlighter-rouge">if</code>或<code class="highlighter-rouge">unless</code>（<code class="highlighter-rouge">elsif</code>和<code class="highlighter-rouge">else</code>为可选）编写简单的表达式:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% if user %}
  Hello {{ user.name }}
{% endif %}

{% if user.name == 'tobi' %}
  Hello tobi
{% elsif user.name == 'bob' %}
  Hello bob
{% endif %}


# Same as above
{% unless user.name == 'tobi' %}
  Hello non-tobi
{% endunless %}
</code></pre></div></div>

<p><strong><code class="highlighter-rouge">Case</code></strong>
如果你需要更多的条件判断，你可以使用case语句:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
     {% case condition %}
         {% when 1 %}
             hit 1
         {% when 2 or 3 %}
             hit 2 or 3
         {% else %}
             ... else ...
     {% endcase %}


</code></pre></div></div>

<p><strong><code class="highlighter-rouge">cycle</code></strong>
我们常常需要在不同的颜色或类似的任务间轮流切换。Liquid对于这样的操作有内置支持，通过使用cycle标签。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% cycle 'one', 'two', 'three' %}
 {% cycle 'one', 'two', 'three' %}
 {% cycle 'one', 'two', 'three' %}
 {% cycle 'one', 'two', 'three' %}     

 will result in     

 one
 two
 three
 one
</code></pre></div></div>

<p><strong><code class="highlighter-rouge">for</code></strong>
循环Liquid允许循环一个集合 :</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% for item in array %}
  {{ item }}
{% endfor %}
</code></pre></div></div>

<p>§ 在每次循环期间，下列的帮助变量都可用于额外的展示需要:</p>

<p><code class="highlighter-rouge">forloop.length</code> : length of the entire for loop</p>

<p><code class="highlighter-rouge">forloop.index</code> : index of the current iteration</p>

<p><code class="highlighter-rouge">forloop.index0</code> : index of the current iteration (zero based)</p>

<p><code class="highlighter-rouge">forloop.rindex</code> : how many items are still left?</p>

<p><code class="highlighter-rouge">forloop.rindex0</code> : how many items are still left? (zero based)</p>

<p><code class="highlighter-rouge">forloop.first</code> : is this the first iteration?</p>

<p><code class="highlighter-rouge">forloop.last</code> : is this the last iteration?</p>

<p>§ 你可以使用一些属性来影响接受循环中的哪项,一些变量可以用来处理循环时选择性处理</p>

<p><code class="highlighter-rouge">limit:int</code> : 使你可以限制接受的循环项个数;
<code class="highlighter-rouge">offset:int</code> : 可以可以让你从循环集合的第n项开始.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array = [1,2,3,4,5,6]
{% for item in array limit:2 offset:2 %}
 {{ item }}
{% endfor %}



results in 3,4
</code></pre></div></div>

<p>§ 反序遍历</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% for item in collection reversed %}
   {{item}}
  {% endfor %}
</code></pre></div></div>

<p>§ 除了对一个已经存在的集合进行循环，你还可以定义一段范围区域内的数字进行循环。这段区域既可以通过文字也可以通过变量数定义得到:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  # if item.quantity is 4...
  {% for i in (1..item.quantity) %}
    {{ i }}
  {% endfor %}      
  

  results in 1,2,3,4
</code></pre></div></div>

<p><strong><code class="highlighter-rouge">assign</code></strong></p>

<p>§ 变量赋值(Variable Assignment)
你可以把数据存储在你自己定义的变量中，以便在输出或者其他标签中使用。创建一个变量的最简单方式是使用assign标签，其语法也是简单明了的：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% assign name = 'freestyle' %}     

 {% for t in collections.tags %}
   {% if t == name %}
       &lt;p&gt;Freestyle!&lt;/p&gt;
   {% endif %}
 {% endfor %}
</code></pre></div></div>

<p>§ 赋值布尔值
另一种常见用法是把<code class="highlighter-rouge">true / false</code>值赋给变量:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {% assign freestyle = false %}      

  {% for t in collections.tags %}
    {% if t == 'freestyle' %}
      {% assign freestyle = true %}
    {% endif %}
  {% endfor %}      

  {% if freestyle %}
    &lt;p&gt;Freestyle!&lt;/p&gt;
  {% endif %}
</code></pre></div></div>

<p>§ 赋值处理过的数据
如果你希望把一系列字符串连接为一个字符串，并将其存储到变量中，你可以使用<code class="highlighter-rouge">capture</code>标签。这个标签是一个块级标签，它会”captures”任何在其中渲染的元素，并把捕获的值赋给给定的变量，而不是把这些值渲染在页面中。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% capture attribute_name %}{{ item.title | handleize }}-{{ i }}-color{% endcapture %}     

 &lt;label for="{{ attribute_name }}"&gt;Color:&lt;/label&gt;     

 &lt;select name="attributes[{{ attribute_name }}]" id="{{ attribute_name }}"&gt;     

   &lt;option value="red"&gt;Red&lt;/option&gt;     

   &lt;option value="green"&gt;Green&lt;/option&gt;     

   &lt;option value="blue"&gt;Blue&lt;/option&gt;     

 &lt;/select&gt;
</code></pre></div></div>

<hr />

<blockquote>
  <p><a href="https://liquid.bootcss.com/basics/variations/">中文官网：https://liquid.bootcss.com/basics/variations/</a>;<br />
  <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">英文文档参考:https://github.com/Shopify/liquid/wiki/Liquid-for-Designers</a>; <br />
  <a href="http://blog.csdn.net/dont27/article/details/38097581">CSDN blog的翻译:http://blog.csdn.net/dont27/article/details/38097581</a></p>
</blockquote>
:ET